# 部署文档网站到 Cloudflare Pages
name: Deploy VitePress site to Cloudflare Pages

on:
  # 在推送到 main 分支时触发
  push:
    branches: [main, master]
  # 允许手动触发工作流
  workflow_dispatch:

# 只允许一个并发部署，跳过正在运行和最新队列之间的运行队列
# 但是，不要取消正在进行的运行，因为我们希望允许这些生产部署完成
concurrency:
  group: cloudflare-pages
  cancel-in-progress: false

jobs:
  # 构建和部署工作
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Cloudflare Pages
    env:
      CLOUDFLARE_PROJECT_NAME: ${{ secrets.CLOUDFLARE_PROJECT_NAME || 'cloudpaste-docs' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 如果未启用 lastUpdated，则不需要

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build with VitePress
        run: npm run docs:build

      - name: Verify build output and favicon files
        run: |
          echo "📁 检查构建输出目录..."
          ls -la docs/.vitepress/dist/
          echo ""
          echo "🎯 检查 favicon 文件..."
          ls -la docs/.vitepress/dist/favicon* || echo "❌ 没有找到 favicon 文件"
          ls -la docs/.vitepress/dist/apple-touch-icon.png || echo "❌ 没有找到 apple-touch-icon.png"
          ls -la docs/.vitepress/dist/android-chrome-*.png || echo "❌ 没有找到 android-chrome 文件"
          echo ""
          echo "📄 检查 index.html 中的 favicon 配置..."
          grep -n "favicon\|apple-touch-icon" docs/.vitepress/dist/index.html || echo "❌ index.html 中没有找到 favicon 配置"

      - name: Check if Pages project exists
        id: check-project
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "检查 Cloudflare Pages 项目是否存在..."
          PROJECT_CHECK=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" | jq -r '.result[] | select(.name=="'$CLOUDFLARE_PROJECT_NAME'") | .name')

          if [ -n "$PROJECT_CHECK" ]; then
            echo "✅ 找到现有Pages项目: $CLOUDFLARE_PROJECT_NAME"
            echo "project_exists=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ 未找到Pages项目: $CLOUDFLARE_PROJECT_NAME"
            echo "project_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Pages project if not exists
        if: steps.check-project.outputs.project_exists == 'false'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "创建 Cloudflare Pages 项目: $CLOUDFLARE_PROJECT_NAME..."
          # 使用 wrangler 创建项目，指定生产分支为 main
          npx wrangler pages project create $CLOUDFLARE_PROJECT_NAME --production-branch=main

          if [ $? -eq 0 ]; then
            echo "✅ 成功创建Pages项目: $CLOUDFLARE_PROJECT_NAME"
          else
            echo "❌ 创建Pages项目失败，请检查项目名称或手动创建项目"
            exit 1
          fi

      - name: Deploy to Cloudflare Pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # 部署到生产分支 main，确保部署到生产环境
          echo "🚀 部署到生产环境 (main 分支)..."
          npx wrangler pages deploy docs/.vitepress/dist --project-name=$CLOUDFLARE_PROJECT_NAME --branch=main

      - name: Display Success Information
        if: success()
        run: |
          echo "===================================================="
          echo "🎉 CloudPaste 文档已成功部署到 Cloudflare Pages!"
          echo "===================================================="
          echo ""
          echo "项目名称: $CLOUDFLARE_PROJECT_NAME"
          echo "分支: main"
          echo ""
          echo "您可以在 Cloudflare Pages 控制面板中查看部署状态:"
          echo "- 登录 https://dash.cloudflare.com/"
          echo "- 进入 Pages > $CLOUDFLARE_PROJECT_NAME"
          echo "===================================================="

      - name: Display Troubleshooting Info
        if: failure()
        run: |
          echo "===================================================="
          echo "❌ 部署失败，可能的解决方案:"
          echo "1. 确保Cloudflare账户存在Pages项目"
          echo "2. 验证API Token权限 (Pages:Edit, Account:Read)"
          echo "3. 检查GitHub Secrets (CLOUDFLARE_API_TOKEN, CLOUDFLARE_ACCOUNT_ID)"
          echo "4. 确保项目名称符合Cloudflare Pages命名规范"
          echo "===================================================="
